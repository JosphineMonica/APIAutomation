// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace TodoAPITests.Features
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("TodoAPITests")]
    public partial class TodoAPITestsFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
#line 1 "TodoAPI.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features", "TodoAPITests", null, ProgrammingLanguage.CSharp, featureTags);
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Validate_GETCheckpointsWithNoLists")]
        [NUnit.Framework.CategoryAttribute("EndPointChecks")]
        [NUnit.Framework.TestCaseAttribute("TC1_VerifyGetEndpointRoot", "/", "Hello World!", null)]
        [NUnit.Framework.TestCaseAttribute("TC2_VerifyGetEndpointWithEmptyList", "/todoitems", "[]", null)]
        public void Validate_GETCheckpointsWithNoLists(string testcases, string endpoint, string responseContent, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "EndPointChecks"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("Testcases", testcases);
            argumentsOfScenario.Add("Endpoint", endpoint);
            argumentsOfScenario.Add("ResponseContent", responseContent);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Validate_GETCheckpointsWithNoLists", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 4
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
 testRunner.Given(string.Format("I set api \'{0}\' for \'<Testcase>\'", endpoint), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 6
 testRunner.Then(string.Format("I make GET Request and verify the valid HTTPS Status code and \'{0}\'", responseContent), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Validate_POSTCheckpoints")]
        [NUnit.Framework.TestCaseAttribute("TC3_PostEndpointUsingName", "/todoitems", "Name:User1", null)]
        [NUnit.Framework.TestCaseAttribute("TC4_PostEndpointUsingID", "/todoitems", "Id:2", null)]
        [NUnit.Framework.TestCaseAttribute("TC5_PostEndpointUsingComplete", "/todoitems", "isComplete:true", null)]
        [NUnit.Framework.TestCaseAttribute("TC6_PostEndpointUsingAllItems", "/todoitems", "Id:1,Name:User1,isComplete:false", null)]
        [NUnit.Framework.TestCaseAttribute("TC7_PostEndpointUsingNameID", "/todoitems", "Id:1,Name:User1", null)]
        [NUnit.Framework.TestCaseAttribute("TC8_PostEndpointUsingIDComplete", "/todoitems", "Id:1,isComplete:true", null)]
        [NUnit.Framework.TestCaseAttribute("TC9_PostEndpointUsingNameComplete", "/todoitems", "Name:User1,isComplete:true", null)]
        [NUnit.Framework.TestCaseAttribute("TC2_UnhappyPath_PostEndpointEmptyList", "/todoitems", "", null)]
        [NUnit.Framework.TestCaseAttribute("TC3_UnhappyPath_PostEndpointinvalidChar", "/todoitems", "Id:1,Name:User#2,isComplete:true", null)]
        public void Validate_POSTCheckpoints(string testcases, string endpoint, string payloadData, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("Testcases", testcases);
            argumentsOfScenario.Add("Endpoint", endpoint);
            argumentsOfScenario.Add("PayloadData", payloadData);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Validate_POSTCheckpoints", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 12
 this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 13
 testRunner.Given(string.Format("I set api \'{0}\' for \'<Testcase>\'", endpoint), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 14
 testRunner.And(string.Format("I make POST Request using \'{0}\' and verify POST Creation HTTPS Status Code", payloadData), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 15
 testRunner.Then(string.Format("I send GET request to verify new todo list\'{0}\'", payloadData), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Validate_GETCheckpointswithTodoLists")]
        [NUnit.Framework.TestCaseAttribute("TC10_VerifyGetEndpointUsingComplete", "/todoitems", "Name:User1,Id:1,isComplete:true", "Complete", null)]
        public void Validate_GETCheckpointswithTodoLists(string testcases, string endpoint, string payloadData, string testEndPoint, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("Testcases", testcases);
            argumentsOfScenario.Add("Endpoint", endpoint);
            argumentsOfScenario.Add("PayloadData", payloadData);
            argumentsOfScenario.Add("TestEndPoint", testEndPoint);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Validate_GETCheckpointswithTodoLists", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 28
 this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 29
 testRunner.Given(string.Format("I set api \'{0}\' for \'<Testcase>\'", endpoint), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 30
 testRunner.And(string.Format("I make POST Request using \'{0}\' and verify POST Creation HTTPS Status Code", payloadData), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 31
 testRunner.Then(string.Format("I send GET request to verify \'{0}\' using \'{1}\'", payloadData, testEndPoint), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Validate_GETCheckpointResponseErrorValidation")]
        [NUnit.Framework.TestCaseAttribute("TC4_UnhappyPath_GetEndpointUsingComplete", "/todoitems", "Name:User1,Id:1,isComplete:false", "Complete", "", "404", null)]
        public void Validate_GETCheckpointResponseErrorValidation(string testcases, string endpoint, string payloadData, string testEndPoint, string responseContent, string hTTPSCode, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("Testcases", testcases);
            argumentsOfScenario.Add("Endpoint", endpoint);
            argumentsOfScenario.Add("PayloadData", payloadData);
            argumentsOfScenario.Add("TestEndPoint", testEndPoint);
            argumentsOfScenario.Add("ResponseContent", responseContent);
            argumentsOfScenario.Add("HTTPSCode", hTTPSCode);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Validate_GETCheckpointResponseErrorValidation", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 36
 this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 37
 testRunner.Given(string.Format("I set api \'{0}\' for \'<Testcase>\'", endpoint), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 38
 testRunner.And(string.Format("I make POST Request using \'{0}\' and verify POST Creation HTTPS Status Code", payloadData), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 39
 testRunner.Then(string.Format("I make GET Request \'{0}\' to verify \'{1}\' and \'{2}\'", testEndPoint, responseContent, hTTPSCode), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Validate_PUTCheckpoint")]
        [NUnit.Framework.TestCaseAttribute("TC12_VerifyPUTEndpointUsingIDwithName", "/todoitems", "Name:User1,Id:1", "Name:User2", "1", null)]
        [NUnit.Framework.TestCaseAttribute("TC13_VerifyPUTEndpointUsingIDwithNullNameChange", "/todoitems", "isComplete:true,Id:1", "Name:null,isComplete:false", "1", null)]
        public void Validate_PUTCheckpoint(string testcases, string endpoint, string payloadData, string testData, string iD, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("Testcases", testcases);
            argumentsOfScenario.Add("Endpoint", endpoint);
            argumentsOfScenario.Add("PayloadData", payloadData);
            argumentsOfScenario.Add("TestData", testData);
            argumentsOfScenario.Add("ID", iD);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Validate_PUTCheckpoint", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 44
 this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 45
 testRunner.Given(string.Format("I set api \'{0}\' for \'<Testcase>\'", endpoint), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 46
 testRunner.When(string.Format("I make POST Request using \'{0}\' and verify POST Creation HTTPS Status Code", payloadData), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 47
 testRunner.And(string.Format("I send GET request to verify new todo list\'{0}\'", payloadData), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 48
 testRunner.Then(string.Format("I send PUT Request to update \'{0}\' using \'{1}\'", testData, iD), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 49
 testRunner.And(string.Format("I send GET request to verify new todo list\'{0}\'", testData), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Validate_PUTCheckpointErrorValidation")]
        [NUnit.Framework.TestCaseAttribute("TC6_UnhappyPath_PUTEndpointUsingNonExistingID", "/todoitems", "isComplete:true,Id:1", "Name:User4,isComplete:true", "2", "404", null)]
        public void Validate_PUTCheckpointErrorValidation(string testcases, string endpoint, string payloadData, string testData, string iD, string errorCode, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("Testcases", testcases);
            argumentsOfScenario.Add("Endpoint", endpoint);
            argumentsOfScenario.Add("PayloadData", payloadData);
            argumentsOfScenario.Add("TestData", testData);
            argumentsOfScenario.Add("ID", iD);
            argumentsOfScenario.Add("ErrorCode", errorCode);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Validate_PUTCheckpointErrorValidation", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 55
 this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 56
 testRunner.Given(string.Format("I set api \'{0}\' for \'<Testcase>\'", endpoint), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 57
 testRunner.When(string.Format("I make POST Request using \'{0}\' and verify POST Creation HTTPS Status Code", payloadData), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 58
 testRunner.And(string.Format("I send GET request to verify new todo list\'{0}\'", payloadData), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 59
 testRunner.Then(string.Format("I send PUT Request \'{0}\' using \'{1}\' and verify HTTPS Status Code \'{2}\'", testData, iD, errorCode), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Validate_DeleteCheckpoint")]
        [NUnit.Framework.TestCaseAttribute("TC14_VerifyDeleteEndpointUsingID", "/todoitems", "Name:User1,Id:1", "1", "200", null)]
        [NUnit.Framework.TestCaseAttribute("TC7_UnhappyPath_DeleteEndpointUsingNonExistingID", "/todoitems", "Name:User1,Id:1,isComplete:true", "2", "404", null)]
        public void Validate_DeleteCheckpoint(string testcases, string endpoint, string payloadData, string iD, string hTTPSCode, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("Testcases", testcases);
            argumentsOfScenario.Add("Endpoint", endpoint);
            argumentsOfScenario.Add("PayloadData", payloadData);
            argumentsOfScenario.Add("ID", iD);
            argumentsOfScenario.Add("HTTPSCode", hTTPSCode);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Validate_DeleteCheckpoint", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 65
 this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 66
 testRunner.Given(string.Format("I set api \'{0}\' for \'<Testcase>\'", endpoint), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 67
 testRunner.When(string.Format("I make POST Request using \'{0}\' and verify POST Creation HTTPS Status Code", payloadData), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 68
 testRunner.And(string.Format("I send GET request to verify new todo list\'{0}\'", payloadData), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 69
 testRunner.Then(string.Format("send DELETE Request to delete the record using \'{0}\' and verify \'{1}\'", iD, hTTPSCode), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("EndToEndTesting_TodoAPI")]
        [NUnit.Framework.TestCaseAttribute("TC15_VerifyEndToEndCRUDOperation", "/todoitems", "Complete", "Name:User1,Id:1,isComplete:true", "Name:User5,isComplete:false", "1", "200", null)]
        public void EndToEndTesting_TodoAPI(string testcases, string endpoint, string testEndPoint, string payloadData, string testData, string iD, string hTTPSCode, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("Testcases", testcases);
            argumentsOfScenario.Add("Endpoint", endpoint);
            argumentsOfScenario.Add("TestEndPoint", testEndPoint);
            argumentsOfScenario.Add("PayloadData", payloadData);
            argumentsOfScenario.Add("TestData", testData);
            argumentsOfScenario.Add("ID", iD);
            argumentsOfScenario.Add("HTTPSCode", hTTPSCode);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("EndToEndTesting_TodoAPI", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 76
 this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 77
 testRunner.Given(string.Format("I set api \'{0}\' for \'<Testcase>\'", endpoint), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 78
 testRunner.And(string.Format("I make POST Request using \'{0}\' and verify POST Creation HTTPS Status Code", payloadData), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 79
 testRunner.Then(string.Format("I send GET request to verify \'{0}\' using \'{1}\'", payloadData, testEndPoint), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 80
 testRunner.When(string.Format("I send PUT Request to update \'{0}\' using \'{1}\'", testData, iD), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 81
 testRunner.Then(string.Format("send DELETE Request to delete the record using \'{0}\' and verify \'{1}\'", iD, hTTPSCode), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("SchemaValidation")]
        [NUnit.Framework.TestCaseAttribute("TC16_ValidateSchemaWithValidJson", "/todoitems", "Name:User1,Id:1,isComplete:true", "Schema.Json", null)]
        [NUnit.Framework.TestCaseAttribute("TC17_ValidateSchemaWithEmptyJson", "/todoitems", "Name:User1,Id:1,isComplete:true", "EmptySchema.Json", null)]
        public void SchemaValidation(string testcases, string endpoint, string payloadData, string fileName, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("Testcases", testcases);
            argumentsOfScenario.Add("Endpoint", endpoint);
            argumentsOfScenario.Add("PayloadData", payloadData);
            argumentsOfScenario.Add("FileName", fileName);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("SchemaValidation", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 86
 this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 87
 testRunner.Given(string.Format("I set api \'{0}\' for \'<Testcase>\'", endpoint), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 88
 testRunner.And(string.Format("I make POST Request using \'{0}\' and validate Schema \'{1}\' against responsecontent" +
                            "", payloadData, fileName), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("ToVerify_POSTEndpointErrors")]
        [NUnit.Framework.TestCaseAttribute("TC1_UnhappyPath_PostEndpoint", "/todoitems", "Id:1,Name:User2,isComplete:true", "Id:1,Name:User2,isComplete:true", "500", null)]
        public void ToVerify_POSTEndpointErrors(string testcases, string endpoint, string payloadData1, string payloadData2, string errorCode, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("Testcases", testcases);
            argumentsOfScenario.Add("Endpoint", endpoint);
            argumentsOfScenario.Add("PayloadData1", payloadData1);
            argumentsOfScenario.Add("PayloadData2", payloadData2);
            argumentsOfScenario.Add("ErrorCode", errorCode);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("ToVerify_POSTEndpointErrors", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 94
 this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 95
 testRunner.Given(string.Format("I set api \'{0}\' for \'<Testcase>\'", endpoint), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 96
 testRunner.When(string.Format("I make POST Request using \'{0}\' and verify POST Creation HTTPS Status Code", payloadData1), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 97
 testRunner.And(string.Format("I send GET request to verify new todo list\'{0}\'", payloadData1), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 98
 testRunner.Then(string.Format("I make another POST Request using \'{0}\' and verify error HTTPS status code \'{1}\'", payloadData2, errorCode), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
